Introduction
============

IOLITE aims to make it easy to create fun and responsive voxel games. This section gives a broad overview of the core concepts.

Entity Component System
-----------------------

The ECS (Entity Component System) is your primary tool for creating games with IOLITE. Entities are functionless objects that can be decorated with components to assign them one or multiple purposes. For example, an entity with a node component can be positioned in three-dimensional space. Adding a character controller component unlocks the ability to interact with the physics environment, and adding a voxel shape component creates a visual representation for your character.

.. note:: If you are aching for a more in-depth explanation of the topic, you can find more information on `Wikipedia <https://en.wikipedia.org/wiki/Entity_component_system>`_.

Worlds
------

Worlds are your creative containers. On its basis, a world stores its name and a single root node. All entities attached to the root node build the description of your scene. In addition to that, worlds can be saved to and loaded from disk. You can also use worlds to structure your project:

Multiple worlds store the levels for your game, while another single world can house the scripts and logic for your menu screen.

Voxel shapes
------------

Voxel shapes are the main tool for building voxel worlds in IOLITE and are exposed in the editor via a component of the same name.

Voxel shapes form a three-dimensional grid where each cell either stores a voxel, or not. Voxels are stored as 8-bit values serving as indices into a color and material palette, allowing you to represent 255 different types plus empty (air) voxels.

- Shapes support storing up to 256Â³ voxels 
- Each voxel shape can reference a unique color and material palette
- Palette index 0 is reserved for marking empty (air) voxels
- Palette indices 1-255 map to slots 0-254 of the palette

Voxel shapes can either be generated procedurally or via the VOX file format generated by voxel editors like `Avoyd <https://www.avoyd.com/>`_ or `MagicaVoxel <https://ephtracy.github.io/>`_.

Data sources and the app metadata file
======================================

Every project reads all its data from one or many so-called data sources. Data sources in the development environment are plain directories in the application's root directory, right next to the executable.

When deploying a build, you can opt in to package the data of each of the data sources to an IOLITE package (IPKG) file. To create IOLITE packages, you can use the package generator script in our `public GitHub repository <https://github.com/MissingDeadlines/iolite>`_; see ``python_scripts/package_generator.py``.

The portable builds of IOLITE are shipped with two data sources. The mandatory ``base`` data source is provided as a package, while the ``default`` data source is available as directories and files, serving the simple default scene. You can use the directory structure of the ``default`` data source as a reference for creating new data sources.

.. warning:: The ``base`` data source contains mandatory assets and has to be available. It's loaded by default, and there is no need to load it manually.

Using data sources for modding
------------------------------

Data sources provide an incredibly flexible approach to modding applications created with IOLITE.

Let's say you want to replace a specific voxel asset in a game, like a tree in a different color or a particular script where you've added some little tweaks or new features. All you have to do is to create a new data source directory and place the modified assets in the correct path in the directory structure, matching the file path used in the base data source. After that, you must load your data source before loading the data sources containing the original assets, which shadows the assets in the base data source.

The order in which data sources are loaded is defined via the app metadata file, depicted in detail in the following section.

Working with the app metadata file
----------------------------------

The app metadata data file is a JSON file with the following content:

.. code-block:: json

  {
      "application_name": "IOLITE",
      "organization_name": "Missing Deadlines",
      "version_string": "0.2.0",

      "data_sources": [
          "default"
      ],

      "initial_world": "default",
      "initial_game_state": "Editing",
  }

The app metadata allows you to adjust basic properties like your application's name and your organization. In addition, it is also in charge of defining the data sources that should be used to source files from. Data sources are loaded in the given order, and data provided by data sources listed first is prioritized.

Here's an overview of all the different parameters:

application_name
   The name of your application.
organization_name
   The name of your organization (if any).
version_string
   Version string following the `Semantic Versioning <https://semver.org/>`_ scheme.
data_sources
   The data sources used for your project. Data sources are loaded in the provided order. The engine starts searching for files in the first data sources and, if the file in question is found, skips searching all the other data sources.
initial_world
   The initial world to load after startup.
initial_game_state
   The initial game state to activate after startup. It can be either `Editing` for the editor or `Main` to start the application in game mode directly.
